<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundColor="0xf5f5f5"
				   width="500" minWidth="400" height="400" minHeight="400"
				   creationComplete="onCreationCompletes(event)" 
				   xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
				   skinClass="components.skins.ResizableTitleWindowSkin">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			
			import actionScripts.events.NewFileEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.renderers.FTETreeItemRenderer;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			
			[Bindable] public var wrapperBelongToProject:ProjectVO;
			[Bindable] public var isInterfaceDialog:Boolean;
			
			[Bindable] public var wrapperOfFolderLocation:FileWrapper;
			public var folderLocation:FileLocation;
			
			[Bindable] private var model:IDEModel = IDEModel.getInstance();
			
			protected function onCreateButton(event:MouseEvent):void
			{
				// double check when double-clicked by tree
				if (!btnCreate.enabled) return;
				
				var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_FILE_SELECTED, null, null, wrapperOfFolderLocation);
				dispatchEvent(tmpEvent);
				
				super.closeThis();
			}
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				minHeight = height;
				title = "Main source folder";
				txtDestination.text = wrapperBelongToProject.folderLocation.fileBridge.name;
				btnCreate.enabled = false;
				
				setTimeout(function():void
				{
					wrapperOfFolderLocation = wrapperBelongToProject.projectFolder;
					tree.dataProvider = wrapperBelongToProject.projectFolder;
					tree.callLater(parseFolders);
				}, 200);
			}
			
			protected function parseFolders():void
			{
				wrapperOfFolderLocation.shallUpdateChildren = false;
				wrapperOfFolderLocation.updateChildren();
				tree.expandItem(wrapperOfFolderLocation, true);
				tree.selectedItem = wrapperOfFolderLocation;
			}
			
			protected function onTreeItemClicked(event:ListEvent):void
			{
				txtDestination.text = UtilsCore.getPackageReferenceByProjectPath(wrapperBelongToProject.folderLocation.fileBridge.nativePath, tree.selectedItem.nativePath);
				wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
			}
			
			protected function onTreeItemOpening(event:TreeEvent):void
			{
				FileWrapper(event.item).shallUpdateChildren = false;
				FileWrapper(event.item).updateChildren();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" property="text"/>
		<s:RadioButtonGroup id="rgModifiersA"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  gap="10" paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13"
			  horizontalAlign="center">
		<s:VGroup width="100%" height="100%">
			<s:Label text="Source Folder:"/>
			<view:PromptTextInput id="txtDestination"
								  prompt="Select Destination" editable="false" width="100%" styleName="textInput"/>
			<utils:CustomTreeFoldersOnly id="tree"
					 width="100%" height="100%"
					 color="0xEEEEEE"
					 contentBackgroundColor="0x0"
					 rollOverColor="0x393939"
					 selectionColor="0xc165b8"
					 alternatingItemColors="[0x444444, 0x4d4c4c]"
					 verticalScrollBarStyleName="black"
					 borderVisible="false"
					 rowHeight="18"
					 useRollOver="true"
					 labelField="name"
					 itemRenderer="actionScripts.ui.renderers.FTETreeItemRenderer"
					 itemClick="onTreeItemClicked(event)"
					 doubleClickEnabled="true"
					 doubleClick="onCreateButton(null)"
					 itemOpening="onTreeItemOpening(event)"/>
		</s:VGroup>
		<s:HGroup id="hgExistingWarning" 
				  width="100%" verticalAlign="middle">
			<s:Image source="@Embed('/elements/images/exclamation.png')"/>
			<s:Label text="Source folder must be a sub-folder in project path" width="100%"/>
		</s:HGroup>
		<mx:HRule width="100%" height="1" strokeColor="0xdadada"
				  horizontalCenter="0"/>
		<s:Button id="btnCreate" label="Select"
				  styleName="lightButtonTight" width="80"
				  click="onCreateButton(event)"
				  enabled="{tree.selectedIndex != 0}"/>
	</s:VGroup>
</resizableTitleWindow:ResizableTitleWindow>