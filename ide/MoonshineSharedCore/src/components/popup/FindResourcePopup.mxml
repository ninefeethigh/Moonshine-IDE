<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundColor="0xf5f5f5"
				   width="600" height="500" title="Find Rersource" skinClass="components.skins.ResizableTitleWindowSkin"
				   minWidth="300" minHeight="300"
				   creationComplete="onCreationComplete()" xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.core.IVisualElementContainer;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.OpenFileEvent;
			import actionScripts.locator.IDEModel;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			import actionScripts.valueObjects.ResourceVO;
			
			[Bindable] private var resources:ArrayCollection = new ArrayCollection();
			
			private var model:IDEModel = IDEModel.getInstance();
			private var loaderIcon: Image;
			
			private function onCreationComplete():void
			{
				for each (var i:ProjectVO in model.projects)
				{
					parseChildrens(i.projectFolder);
				}
			}
			
			/**
			 * Remove loader icon from its parent
			 */
			private function removeLoaderIcon():void
			{
				IVisualElementContainer(loaderIcon.owner).removeElement(loaderIcon);
				loaderIcon = null;
			}
			
			private function parseChildrens(value:FileWrapper):void
			{
				if (!value) return;
				
				var extension: String = value.file.fileBridge.extension;
				if (!value.file.fileBridge.isDirectory && (extension != null) && isAcceptableResource(extension))
				{
					resources.addItem(new ResourceVO(value.file.fileBridge.name, value));
					return;
				}
				
				if ((value.children is Array) && (value.children as Array).length > 0) 
				{
					var tmpSubChildren:Array = [];
					for each (var c:FileWrapper in value.children)
					{
						extension = c.file.fileBridge.extension;
						if (!c.file.fileBridge.isDirectory && (extension != null) && isAcceptableResource(extension))
						{
							resources.addItem(new ResourceVO(c.file.fileBridge.name, c));
						}
						else if (c.file.fileBridge.isDirectory) parseChildrens(c);
					}
				}
			}
			
			private function isAcceptableResource(extension:String):Boolean
			{
				return (extension == "as" || extension == "mxml" || 
					extension == "css" || extension == "xml" || extension == "bat" || extension == "txt"
					 || extension == "as3proj" || extension == "actionScriptProperties");
			}
			
			private function getResourceName(item:Object): String 
			{
				return item.name +" - "+ item.resourcePath;
			}
			
			private function filterSearch(filter:Boolean=true): void
			{
				if (filter) resources.filterFunction = matchResource;
				else resources.filterFunction = null;
				resources.refresh();
			}
			
			private function matchResource(item:Object):Boolean 
			{
				var tmpDataString: String = item.name.toLowerCase();
				if (tmpDataString.indexOf(txt_fileName.text.toLowerCase()) != -1 ) return true;
				return false;
			}
			
			protected function onListDoubleClicked(event:MouseEvent):void
			{
				if(!lstResources.selectedItem)
				{
					Alert.show("Please select an item to open.");
					return;
				}
				
				var tmpObject: ResourceVO = lstResources.selectedItem as ResourceVO;
				GlobalEventDispatcher.getInstance().dispatchEvent( 
					new OpenFileEvent(OpenFileEvent.OPEN_FILE, tmpObject.sourceWrapper.file, -1, tmpObject.sourceWrapper) 
				);
				
				super.closeThis();
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup height="100%" width="100%" 
			  gap="10" paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13"
			  horizontalAlign="center">
		<s:VGroup width="100%">
			<s:Label text="Search an select an item to open:"/>
			<view:PromptTextInput id="txt_fileName"
								  prompt="File Name" width="100%" styleName="textInput"
								  maxChars="129"
								  change="filterSearch()" creationComplete="txt_fileName.setFocus()"/>
		</s:VGroup>
		<s:VGroup width="100%" height="100%">
			<s:Label text="Matching items:"/>
			<s:List id="lstResources" 
					width="100%" height="100%"
					dataProvider="{resources}" labelFunction="getResourceName" styleName="multiLineList"
					doubleClickEnabled="true" doubleClick="onListDoubleClicked(event)"/>
		</s:VGroup>
		<s:Button label="Open"
				  styleName="lightButtonTight" width="80"
				  click="onListDoubleClicked(null)"/>
	</s:VGroup>
</resizableTitleWindow:ResizableTitleWindow>