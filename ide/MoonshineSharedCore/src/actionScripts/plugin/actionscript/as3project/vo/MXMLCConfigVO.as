////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
package actionScripts.plugin.actionscript.as3project.vo
{
	import __AS3__.vec.Vector;
	
	import actionScripts.factory.FileLocation;
	import actionScripts.locator.IDEModel;
	import actionScripts.valueObjects.ConstantsCoreVO;
	import actionScripts.valueObjects.FileWrapper;
	
	public class MXMLCConfigVO extends FileWrapper
	{
		public function MXMLCConfigVO(file:FileLocation=null)
		{
			super(file);
		}
		
		public function write(pvo:AS3ProjectVO):void 
		{
			if (pvo.targets.length == 0) 
			{
				// No targets found for config construction.
				return;
			}
			
			var i:int;
			
			var oldIC:Boolean = XML.ignoreComments;
			XML.ignoreComments = false;
			
			var data:XML = <flex-config />;
				
			XML.ignoreComments = oldIC;
			
			// re-verify SWF version - crucial part
			if (!pvo.buildOptions.customSDK && IDEModel.getInstance().defaultSDK) pvo.swfOutput.swfVersion = SWFOutputVO.getSDKSWFVersion(null);
			else if (pvo.buildOptions.customSDK) pvo.swfOutput.swfVersion = SWFOutputVO.getSDKSWFVersion(pvo.buildOptions.customSDKPath);
			data.appendChild(
				<target-player>{pvo.swfOutput.swfVersion}.0.0</target-player>
			);

			data.appendChild(
				<compiler />
			);
			
			// TODO add locales
			
			// TODO built-in compiler constants like CONFIG::debug, CONFIG::release and CONFIG::timeStamp
			var compilerConstants:Vector.<String> = Vector.<String>([]);
			if (pvo.buildOptions.compilerConstants && pvo.buildOptions.compilerConstants != "")
				compilerConstants = Vector.<String>(pvo.buildOptions.compilerConstants.split("\n"));
				
			for each (var constant:String in compilerConstants) 
			{
				var constantSp:Array = constant.split(",");
				data.compiler.appendChild(<define><name>{constantSp[0]}</name><value>{constantSp[1]}</value></define>);
			}
			
			if (pvo.classpaths.length > 0)			data.compiler.appendChild(exportPaths(pvo.classpaths, <source-path append="true"/>, <path-element/>));
			if (pvo.libraries.length > 0)			data.compiler.appendChild(exportPaths(pvo.libraries, <library-path append="true"/>, <path-element/>));
			// TODO possibly have to iterate through all the swc files in the dir and add their paths manually?
			if (pvo.includeLibraries.length > 0)	data.compiler.appendChild(exportPaths(pvo.includeLibraries, <include-libraries append="true"/>, <library/>));
			if (pvo.externalLibraries.length > 0)	data.compiler.appendChild(exportPaths(pvo.externalLibraries, <external-library-path append="true"/>, <path-element/>));
			// TODO pvo.runtimeSharedLibraries
			
			data.appendChild(exportPaths(pvo.targets, <file-specs/>, <path-element/>));
			
			// SWF
			data.appendChild(<default-background-color>#{pvo.swfOutput.backgroundColorHex}</default-background-color>);
			data.appendChild(<default-frame-rate>{pvo.swfOutput.frameRate}</default-frame-rate>);
			data.appendChild(<default-size><width>{pvo.swfOutput.width}</width><height>{pvo.swfOutput.height}</height></default-size>);
			
			
			if (ConstantsCoreVO.IS_AIR)
			{
				var dataStr:String = 	
					"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"+
					"<!--This Adobe Flex compiler configuration file was generated by a tool.-->\n"+
					"<!--Any modifications you make may be lost.-->\n"+
					data.toXMLString();
				if (!file)
				{
					var dir:FileLocation = pvo.folderLocation.resolvePath("obj/");
					if (!dir.fileBridge.exists) dir.fileBridge.createDirectory();
					
					file = dir.resolvePath(pvo.projectName+"Config.xml");
				}
				
				// Write file
				file.fileBridge.save(dataStr);
			}
		}
		
		private function exportPaths(v:Vector.<FileLocation>, container:XML, element:XML):XML 
		{
			if (ConstantsCoreVO.IS_AIR)
			{
				for each (var f:FileLocation in v) {
					var e:XML = element.copy();
					var nativePath: String = f.fileBridge.nativePath;
					if (f.fileBridge.nativePath.charAt(0) == "/")
					{
						var pattern:RegExp = new RegExp(/(\\)/g);
						nativePath = f.fileBridge.nativePath.replace(pattern, "/");
					}
					e.appendChild(nativePath);
					container.appendChild(e);
				}
			}
			
			return container;
		}
	}
}