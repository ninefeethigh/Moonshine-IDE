<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   implements="actionScripts.ui.IContentWindow" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" backgroundColor="0xf5f5f5" width="100%" height="100%" 
		   label="Ant Build" creationComplete="antBuild_creationComplete(event)" horizontalCenter="0" verticalCenter="0" >
	<fx:Script>
		<![CDATA[
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.ProjectEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.core.compiler.CompilerEventBase;
			import actionScripts.plugin.settings.renderers.LinkButtonSkin;
			import actionScripts.plugin.settings.vo.PluginSetting;
			import actionScripts.plugins.ant.events.AntBuildEvent;
			import actionScripts.valueObjects.ConstantsCoreVO;
			
			import components.popup.SDKDefinePopup;
			import components.popup.SDKSelectorPopup;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.validators.Validator;
			
			[Bindable]
			private var _isFlexSDK:Boolean;
			[Bindable]
		 	private var _isAntPath:Boolean;
			[Bindable]
			private var _isAntConfigurPath:Boolean;
			[Bindable]
			private var description:String = "\tAnt build process needs 3 files for build Flex application,i.e build.xml file,Apache Flex SDK and Ant Home. Pelase set these 3 files first before starting Ant Build.\n\n\tAnt Home : Set Ant Home path for Ant Build through browse Button.If you already set Ant Home path in setting then no need to set Ant Home path in this window.\n\n\tFlex SDK : Select Apache Flex SDK through Flex SDK Browse Button.If you already set Flex SDK in setting then no need to set Flex SDK in this window.\n\n\tAnt Configure : Set build.xml file for Ant build through Browse Button.You can also set Ant configure file from Menu also Ant -> Build Configure.If you already select build.xml file from Menu then no need to select file from this window.\n\n\tAnt Build : Start Ant Build if all paths are configured.";
			
			private var model:IDEModel = IDEModel.getInstance();
			private var file:FileLocation;
			private var antConfigurefile:FileLocation;
			private var sdkPopup:SDKSelectorPopup;
			private var sdkPathPopup:SDKDefinePopup;
			private var vResult:ValidationResultEvent;
			private var _customSDKAvailable:Boolean;
			private var buildSDK:FileLocation;
			private var antHome:FileLocation;
		//	public static const ANT_BUILD: String = "ANT_BUILD";
			
			public function get longLabel():String
			{
				return "But what is it good for?";
			}
			
			public function isChanged():Boolean
			{
				return false;
			}
			
			public function isEmpty():Boolean
			{
				return false;
			}
			
			public function save():void
			{
			}
			
			public function set customSDKAvailable(sdk:Boolean):void
			{
				_customSDKAvailable = sdk;
			}
			
			public function get customSDKAvailable():Boolean
			{
				return _customSDKAvailable;
			}
			
			public function  refreshValue():void
			{
				if(!customSDKAvailable)
					_isFlexSDK = true;
				else
					_isFlexSDK = false;
				if(model.antHomePath)
					_isAntPath = true;
				else
					_isAntPath = false;
				if(model.antScriptFile)
				{
					_isAntConfigurPath = true;
					lblAntFilePath.text = model.antScriptFile.fileBridge.nativePath;
				}
				else
					_isAntConfigurPath = false;
			}
			
			protected function antBuild_creationComplete(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				if(!customSDKAvailable)
					_isFlexSDK = true;
				else
					_isFlexSDK = false;
				if(model.antHomePath)
					_isAntPath = true;
				else
					_isAntPath = false;
				if(model.antScriptFile)
				{
					_isAntConfigurPath = true;
					lblAntFilePath.text = model.antScriptFile.fileBridge.nativePath;
				}
				else
					_isAntConfigurPath = false;
				
				 var ps:PluginSetting = new PluginSetting("Ant Build", "Moonshine Project Team","Build Flex application through Ant script", false);
				vgContainer.addElementAt(ps.renderer, 0); 
				
			  /*   ps = new PluginSetting("Ant Build Description", "", description, false);
				groupContainer.addElementAt(ps.renderer, 0); */
			}
			
			protected function btnBrowseFlexSDK_clickHandler(event:MouseEvent):void
			{
			// TODO Auto-generated method stub
				if (!sdkPathPopup)
				{
					sdkPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, SDKSelectorPopup, false) as SDKSelectorPopup;
					sdkPopup.addEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKUpdated);
					sdkPopup.addEventListener(CloseEvent.CLOSE, onSDKPopupClosed);
					PopUpManager.centerPopUp(sdkPopup);
				}
				else
				{
					PopUpManager.bringToFront(sdkPathPopup);
				}
			}
			
			private function onFlexSDKUpdated(event:ProjectEvent):void
			{
				// in case user deleted the entry
				txtFlexSdk.text = event.anObject.path;
				onSDKPopupClosed(null);
			}
			
			private function onSDKPopupClosed(event:CloseEvent):void
			{
				sdkPopup.removeEventListener(CloseEvent.CLOSE, onSDKPopupClosed);
				sdkPopup.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onFlexSDKUpdated);
				sdkPopup = null;
			}
			
			protected function btnBrowseAnt_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				file = new FileLocation();
				file.fileBridge.browseForDirectory("Select directory", openFile, openFileCancelled);
			}
			
			private function openFile(fileDir:Object):void
			{
				txtAntHome.text =  fileDir.nativePath;
				file = null;
			}
			
			private function openFileCancelled():void
			{
			}
			
			protected function btnAntConfigure_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				antConfigurefile = new FileLocation();
				antConfigurefile.fileBridge.browseForOpen("Select Build File", selectBuildFile, cancelOpenFile, ["*.xml"]);
			}
			
			protected function cancelOpenFile():void
			{
				/*event.target.removeEventListener(Event.SELECT, selectBuildFile);
				event.target.removeEventListener(Event.CANCEL, cancelOpenFile);*/
			}
			
			protected function selectBuildFile(fileDir:Object):void
			{ 
				txtAntConfigure.text = fileDir.nativePath //model.antScriptFile.fileBridge.nativePath;
				antConfigurefile= null;
			}
			
			protected function btnAntBuild_clickHandler(event:MouseEvent):void
			{
				var tmpArr : Array = new Array( );
				if(hgFlexSDK.visible)
					tmpArr.push(flexSDKV);
				if(hgAntBuild.visible)
					tmpArr.push(antHomeV);
				if(hgAntConfigure.visible)
					tmpArr.push(antConfigureV);
				if ( Validator.validateAll(tmpArr).length != 0 ) return;
				if(txtAntHome.text)antHome = new FileLocation(txtAntHome.text);
				if(txtAntConfigure.text)model.antScriptFile = new FileLocation(txtAntConfigure.text);
				if(txtFlexSdk.text)buildSDK = new FileLocation(txtFlexSdk.text);
				this.dispatchEvent(new AntBuildEvent(AntBuildEvent.ANT_BUILD,buildSDK,antHome));
			}
			
			private function clearPath(event:MouseEvent):void
			{
				if(event.currentTarget.id == "btnAntClear")
					txtAntHome.text = "";
				else if(event.currentTarget.id == "btnFlexSDK")
					txtFlexSdk.text = "";
				else if(event.currentTarget.id == "btnAntConfigure")
					txtAntConfigure.text = "";
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:StringValidator id="flexSDKV" source="{txtFlexSdk}"  property="text" requiredFieldError="Set Flex SDK path first." />
		<mx:StringValidator id="antHomeV" source="{txtAntHome}" property="text" requiredFieldError="Set Ant Home path first." />
		<mx:StringValidator id="antConfigureV" source="{txtAntConfigure}" property="text" requiredFieldError="You need to configure the script first." />
	</fx:Declarations>
<s:VGroup height="100%" width="100%" horizontalAlign="center" >
	<s:VGroup height="100%" width="100%"  id="vgContainer" paddingLeft="15"  paddingTop="15" paddingRight="15" paddingBottom="15" >
		  <mx:HRule width="100%" strokeWidth="1" strokeColor="0xdadada" />
			<s:VGroup visible="{_isAntConfigurPath}" includeInLayout="{_isAntConfigurPath}" id="hbConfigurepath"
				 paddingLeft="15"  paddingTop="15" paddingRight="15" paddingBottom="15" width="100%" >
				<s:Label text="Ant Build File:" width="100%" styleName="uiTextSettingsLabel" />
				<s:Label id="lblAntFilePath" width="100%" styleName="uiTextSettingsLabel"  />
				<mx:Spacer width="100%" height="5"/>
				<mx:HRule width="100%" strokeWidth="1" strokeColor="0xdadada" />
			</s:VGroup>
			<s:VGroup id="hgAntBuild" width="100%" includeInLayout="{!_isAntPath}" visible="{!_isAntPath}" 
					  paddingLeft="15" paddingTop="15" paddingRight="15"  paddingBottom="15">
				<s:HGroup width="100%">
					<s:Label styleName="uiTextSettingsLabel" text="Ant Home" />
					<mx:Spacer width="100%"/>
					<s:Button label="Clear" id="btnAntClear" skinClass="{LinkButtonSkin}"  click="clearPath(event)" />	
					<s:Button label="Change"  skinClass="{LinkButtonSkin}"  click="btnBrowseAnt_clickHandler(event)" />	
				</s:HGroup>
				<s:TextInput id="txtAntHome" styleName="uiTextSettingsValue" paddingTop="10" width="98%"/>
				<mx:Spacer width="100%" height="5"/>
				<mx:HRule width="100%" strokeWidth="1" strokeColor="0xdadada" />
		   </s:VGroup>
		   <s:VGroup  width="100%" includeInLayout="{_isFlexSDK}" visible="{_isFlexSDK}" id="hgFlexSDK" paddingLeft="15" 
					  paddingTop="15" paddingRight="15"  paddingBottom="15">
				<s:HGroup width="100%">
					<s:Label styleName="uiTextSettingsLabel" text="Flex SDK" />
					<mx:Spacer width="100%"/>
					<s:Button label="Clear" id="btnFlexSDK" skinClass="{LinkButtonSkin}" click="clearPath(event)" />	
					<s:Button label="Change"  skinClass="{LinkButtonSkin}"  click="btnBrowseFlexSDK_clickHandler(event)" />
				</s:HGroup>
				<s:TextInput id="txtFlexSdk"  styleName="uiTextSettingsValue" paddingTop="10" width="98%"/>	
			   <mx:Spacer width="100%" height="5"/>
			   <mx:HRule width="100%" strokeWidth="1" strokeColor="0xdadada" />
		  </s:VGroup>
		  <s:VGroup visible="{!_isAntConfigurPath}" includeInLayout="{!_isAntConfigurPath}" id="hgAntConfigure"
				  paddingLeft="15"  paddingTop="15" paddingRight="15" paddingBottom="15" width="100%">
			  <s:HGroup width="100%">
				 <s:Label styleName="uiTextSettingsLabel" text="Ant Script to Run" />
				<mx:Spacer width="100%"/>
				<s:Button label="Clear" id="btnAntConfigure" skinClass="{LinkButtonSkin}"  click="clearPath(event)" />	
				<s:Button label="Change"  skinClass="{LinkButtonSkin}"  click="btnAntConfigure_clickHandler(event)" />	
			  </s:HGroup>
			  <s:TextInput id="txtAntConfigure" styleName="uiTextSettingsValue" paddingTop="10" width="98%"/>
			  <mx:Spacer width="100%" height="5"/>
			  <mx:HRule width="100%" strokeWidth="1" strokeColor="0xdadada" />
		  </s:VGroup>
		  <s:Spacer width="100%" height="100%" />
		  <s:HGroup width="100%" horizontalAlign="center">
			 <s:Button label="Ant Build" id="btnAntBuild" click="btnAntBuild_clickHandler(event)"  styleName="lightButton" />
		  </s:HGroup>
	</s:VGroup>
</s:VGroup>
</mx:Canvas>
