<js:View xmlns:fx="http://ns.adobe.com/mxml/2009"  xmlns:local="*" xmlns:views="views.*" xmlns:js="library://ns.apache.org/flexjs/basic" xmlns:ns="library://ns.apache.org/flexjs/html5">
	<fx:Script><![CDATA[
		import org.apache.flex.events.Event;
		import org.apache.flex.html.HContainer;
		import org.apache.flex.html.Label;
		import org.apache.flex.html.SimpleAlert;
		import $GrailsDomainClassPackageName$.$GrailsDomainClassName$Manager;
		import $GrailsDomainClassPackageName$.$GrailsDomainClassName$;
		import $GrailsDomainClassPackageName$.$GrailsDomainClassName$Utils;
		import $GrailsDomainClassPackageName$.$GrailsDomainClassName$UiUtils;
		
		// NOTE we should never refer to Domain class name in final template code
		public var manager : $GrailsDomainClassName$Manager = new $GrailsDomainClassName$Manager();
		public var utils : $GrailsDomainClassName$Utils = new $GrailsDomainClassName$Utils();
		private var controls : Array = new Array();
		private var oldSelected: $GrailsDomainClassName$ = null;
		private var data: Array = null;
		
		
		private function debug(line:String) :void
		{
			debugLabel.text += "<" + line + ">";
		}
		
		private function debugFresh(line:String) :void
		{
			debugLabel.text = "<" + line + ">";
		}
		
		
		private function clearDebug() : void
		{
			debugLabel.text = "";
		}
		
		private function findControlInChildrenById(container: View, id: String): Object
		{
			
			return $GrailsDomainClassName$UiUtils.findControlInChildrenById(container, id);
		}
		

		
		private function updateSingleViewToObjectList() : void
		{
			
			if (oldSelected != null) 
			{
				var container:HContainer = controls[utils.getMainKeyValue(oldSelected)];
				
				var indexOfFields:int = 0;
				var currentValue : String = null;
				for each(var name:* in utils.getPropertyNames()) 
				{
					var control:Object = findControlInChildrenById(singleObjectView, name);
					if (control != null)
					{
					//currentValue = $GrailsDomainClassName$UiUtils.valueOfControl(singleObjectView[name], name);
					currentValue = $GrailsDomainClassName$UiUtils.valueOfControl(control, name);
					container.getElementAt(indexOfFields).text = currentValue;
					utils.setProperty(oldSelected, name, currentValue);
					}
					indexOfFields = indexOfFields + 1;
				}
			}
		}
		

		
		private function bindSingleViewToSelect(selected:$GrailsDomainClassName$) : void {
			//SimpleAlert.show("bindSingleViewToSelect", this.parent);
			// save values to old selected and to the list view
			// NOTE we have to copy manually because data binding is mostly broken till 0.7
			//singleObjectView.exampleCombobox.selectedItem = "Three";
			//singleObjectView.exampleCombobox.selectedIndex = 1;
			updateSingleViewToObjectList();
			// remove old border
			singleObjectView.selectedObject = selected;
			var containerOfNewSelected:HContainer = controls[utils.getMainKeyValue(selected)];
			//containerOfNewSelected.style = "border:1px solid red";
			//debugLabel.text = containerOfNewSelected.style;
			// mark new border
			var currentValue:Object = null;
			for each(var nameToCopy:* in utils.getPropertyNames()) 
			{
				//singleObjectView[nameToCopy].text = utils.getProperty(selected, nameToCopy);
				currentValue = utils.getProperty(selected, nameToCopy)
				//SimpleAlert.show(nameToCopy + "=" + currentValue, this.parent);
				var control:Object = findControlInChildrenById(singleObjectView, nameToCopy);
				if (control != null)
				{
					
					//$GrailsDomainClassName$UiUtils.updateControlToValue(singleObjectView[nameToCopy], nameToCopy, currentValue);
					$GrailsDomainClassName$UiUtils.updateControlToValue(control, nameToCopy, currentValue);
				}
				
				
				
			}
			
			oldSelected = selected;
		}
		
	
		
		private function createListOfDomain(book:$GrailsDomainClassName$):void {
			var container:HContainer = new HContainer();
			var indexOfFields:int = 0;
			for each(var name:* in utils.getPropertyNames()) 
			{
				var label:Label = new Label();
				// TODO control width of label
				label.width = 100;
				label.text =  new String(utils.getProperty(book, name));
				label.addEventListener(MouseEvent.CLICK, function(me:MouseEvent):void{bindSingleViewToSelect(book)});
				container.addElement(label);
				indexOfFields = indexOfFields + 1;
			}
			
			var selectButton:TextButton = new TextButton();
			selectButton.text = "select";
			selectButton.addEventListener(MouseEvent.CLICK, function(me:MouseEvent):void{ clearDebug();bindSingleViewToSelect(book)});
			container.addElement(selectButton);
			
			var button:TextButton = new TextButton();
			button.text = "del";
			button.addEventListener(MouseEvent.CLICK, function(me:MouseEvent):void{ clearDebug();deleteData(book.id)});
			
			container.addElement(button);
			listContainer.addElement(container);
			controls[book.id] = container;
		}
		
		
		// Callbacks for data layer
		// TODO only call back of create new entry is implemented
		// TODO at least we need call back for delete to re-arrange the ui
		private function afterCreateOneEntry(old:String, newId:String):void
		{
			//debugLabel.text = "WOOO old=" + old + " new=" + newId;
			
			controls[newId] = controls[old];
			controls[old] = null; 
		}
		
		
		private function createNew():void {
			var obj : $GrailsDomainClassName$ = new $GrailsDomainClassName$();
			obj.id = 981;
			//book.title = "tobechanged";
			// TODO generate id? creating new object for use in UI should be different to create one for store
			data.push(obj);
			createListOfDomain(obj);
			
			clearDebug();bindSingleViewToSelect(obj);
			
		}
		
		
		
		private function deleteData(id:uint):void
		{
			var container : HContainer = controls[id];
			controls.removeAt(controls.indexOf(container));
			listContainer.removeElement(container);
			
			var entryToBeDeleted : $GrailsDomainClassName$= utils.findByMainKey(data, id);
			data.removeAt(data.indexOf(entryToBeDeleted));
		}
		
		private function saveData():void {
			updateSingleViewToObjectList();
			manager.save(data, afterCreateOneEntry);
		}
		
		public function httpResult(event:Event):void { 
			debug("got something good");
		} 
		
		public function httpFault(event:Event):void { 
			debug("wrong something" + event);
		} 
		
		private function dataLoaded(event:Event) :void
		{
			data = manager.query();
			dataToInputs(data);
		}
		
		private function loadData(): void {
			manager.addEventListener($GrailsDomainClassName$Manager.DATALOADED, dataLoaded);
			manager.load();
		}
		
		private function dumpAll():String {
			
			var dump: String = "";
			for (var i:int = 0; i < data.length; i++) {
				dump += utils.objectToJson(data[i]);
				dump += " ";
			}
			return dump;
		}
		
		
		
		private function dataToInputs(list:Array):void
		{
			for each(var control:* in controls) 
			{
				if (control != null )
				{
					listContainer.removeElement(control);		
				}
			}
			controls = new Array();
			for (var i:int = 0; i < list.length; i++) {
				var book : $GrailsDomainClassName$ = list[i];
				createListOfDomain(book);
			}
		}
		
		private function startup():void
		{
			manager.debugLabel = debugLabel;
			loadData();
		}
		
	]]></fx:Script>
		<fx:Style>.alignTop{vertical-align: top;}</fx:Style>
	
		<js:View id="main" initComplete="startup()">
			<js:Container width="100%" height="100%" style="border:1px solid red">
				<js:beads>
					<js:VerticalLayout/>
					
				</js:beads>
				<js:Container height="300" width="800" style="border:1px solid black">
					<js:beads>
						<js:VerticalLayout/>
					</js:beads>
					<js:Panel id="listContainer" width="100%">
						<js:beads>
							<js:VerticalLayout/>
						</js:beads>
					</js:Panel>
					<js:HContainer>
						<js:TextButton id="create" text="create" width="48" height="20" className="alignTop"  click="createNew()"/>
						
						<js:TextButton id="save" text="save" width="48" height="20" className="alignTop"  click="saveData()"/>
						
						<js:TextButton id="load" text="load" width="48" height="20" className="alignTop"  click="loadData()"/>
					</js:HContainer>
					
					
					
					<js:Label id="debugLabel" text="" width="800" height="30" className="alignTop"  />
<!--					
					<js:Label id="testEvent" text="testEvent" width="800" height="30" click="debugLabel.text='HIT'" />
					
	-->				
					<views:$GrailsDomainClassName$View id="singleObjectView"/>

					
				</js:Container>
				
			</js:Container>
			
		</js:View>
		
	
</js:View>