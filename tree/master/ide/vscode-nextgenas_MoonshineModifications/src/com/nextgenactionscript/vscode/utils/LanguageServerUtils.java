/*
Copyright 2016 Bowler Hat LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package com.nextgenactionscript.vscode.utils;

import java.net.URI;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;

import org.apache.flex.compiler.clients.problems.CompilerProblemCategorizer;
import org.apache.flex.compiler.common.ISourceLocation;
import org.apache.flex.compiler.problems.CompilerProblemSeverity;
import org.apache.flex.compiler.problems.ICompilerProblem;

import org.eclipse.lsp4j.DiagnosticSeverity;
import org.eclipse.lsp4j.Location;
import org.eclipse.lsp4j.Position;
import org.eclipse.lsp4j.Range;

/**
 * Utility functions for converting between language server types and Flex
 * compiler types.
 */
public class LanguageServerUtils
{
    /**
     * Converts an URI from the language server protocol to a Path.
     */
    public static Path getPathFromLanguageServerURI(String apiURI)
    {
        URI uri = URI.create(apiURI);
        Optional<Path> optionalPath = getFilePath(uri);
        if (!optionalPath.isPresent())
        {
            System.err.println("Could not find URI " + uri);
            return null;
        }
        return optionalPath.get();
    }

    /**
     * Converts a compiler problem to a language server severity.
     */
    public static DiagnosticSeverity getDiagnosticSeverityFromCompilerProblem(ICompilerProblem problem)
    {
        CompilerProblemCategorizer categorizer = new CompilerProblemCategorizer(null);
        CompilerProblemSeverity severity = categorizer.getProblemSeverity(problem);
        switch (severity)
        {
            case ERROR:
            {
                return DiagnosticSeverity.Error;
            }
            case WARNING:
            {
                return DiagnosticSeverity.Warning;
            }
            default:
            {
                return DiagnosticSeverity.Information;
            }
        }
    }

    /**
     * Converts a compiler source location to a language server location. May
     * return null if the line or column of the source location is -1.
     */
    public static Location getLocationFromSourceLocation(ISourceLocation sourceLocation)
    {
        Path sourceLocationPath = Paths.get(sourceLocation.getSourcePath());
        Location location = new Location();
        location.setUri(sourceLocationPath.toUri().toString());

        Range range = getRangeFromSourceLocation(sourceLocation);
        if (range == null)
        {
            //this is probably generated by the compiler somehow
            return null;
        }
        location.setRange(range);

        return location;
    }

    /**
     * Converts a compiler source location to a language server range. May
     * return null if the line or column of the source location is -1.
     */
    public static Range getRangeFromSourceLocation(ISourceLocation sourceLocation)
    {
        int line = sourceLocation.getLine();
        int column = sourceLocation.getColumn();
        if (line == -1 || column == -1)
        {
            //this is probably generated by the compiler somehow
            return null;
        }
        Position start = new Position();
        start.setLine(line);
        start.setCharacter(column);

        int endLine = sourceLocation.getEndLine();
        int endColumn = sourceLocation.getEndColumn();
        if (endLine == -1 || endColumn == -1)
        {
            endLine = line;
            endColumn = column;
        }
        Position end = new Position();
        end.setLine(endLine);
        end.setCharacter(endColumn);

        Range range = new Range();
        range.setStart(start);
        range.setEnd(end);

        return range;
    }

    private static Optional<Path> getFilePath(URI uri)
    {
        if (!uri.getScheme().equals("file"))
        {
            return Optional.empty();
        }
        else
        {
            return Optional.of(Paths.get(uri));
        }
    }
}
